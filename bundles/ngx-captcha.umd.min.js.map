{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://ngx-captcha/lib/components/base-recaptcha.component.ts","ng://ngx-captcha/lib/models/recaptcha-type.enum.ts","ng://ngx-captcha/lib/services/script.service.ts","ng://ngx-captcha/lib/components/invisible-recaptcha.component.ts","ng://ngx-captcha/lib/components/recaptcha-2.component.ts","ng://ngx-captcha/lib/services/recaptcha_v3.service.ts","ng://ngx-captcha/lib/ngx-captcha.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","BaseReCaptchaComponent","renderer","zone","injector","scriptService","captchaElemPrefix","setupCaptcha","useGlobalDomain","type","tabIndex","success","EventEmitter","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","isLoaded","ngAfterViewInit","control","get","NgControl","_a","ngAfterViewChecked","setupComponent","ngOnChanges","changes","hl","firstChange","currentValue","previousValue","cleanup","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","_this","run","onChange","undefined","onTouched","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","document","getElementById","Error","renderReCaptcha","runOutsideAngular","render","getCaptchaProperties","handleCallback","callback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","registerCaptchaScript","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","innerHTML","newElem","createElement","id","appendChild","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","Input","Output","ReCaptchaType","InvisibleReCaptcha","ReCaptcha2","ScriptService","windowGrecaptcha","windowOnLoadCallbackProperty","globalDomain","defaultDomain","onLoad","language","grecaptchaScriptLoaded","window","bind","scriptElem","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","getLanguageParam","Injectable","NgZone","InvisibleReCaptchaComponent","_super","call","size","theme","badge","recaptchaType","execute","sitekey","siteKey","response","expired-callback","error-callback","tabindex","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","Injector","ViewChild","static","ReCaptcha2Component","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","ngOnDestroy","registerCallbacks","ReCaptchaV3Service","action","config","executeAsPromise","then","Promise","resolve","reject","token","NgxCaptchaModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    AfterViewChecked,\n    AfterViewInit,\n    ElementRef,\n    EventEmitter,\n    Injector,\n    Input,\n    NgZone,\n    OnChanges,\n    Output,\n    Renderer2,\n    SimpleChanges,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl, AbstractControl } from '@angular/forms';\nimport { Type } from '@angular/core';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { ScriptService } from '../services/script.service';\n\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked {\n\n    /**\n    * Prefix of the captcha element\n    */\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\n\n    private setupCaptcha: boolean = true;\n\n    /**\n    * Google's site key.\n    * You can find this under https://www.google.com/recaptcha\n    */\n    @Input() siteKey: string;\n\n    /**\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\n     */\n    @Input() useGlobalDomain: boolean = false;\n\n    /**\n    * Type\n    */\n    @Input() type: 'audio' | 'image' = 'image';\n\n    /**\n    * Language code. Auto-detects the user's language if unspecified.\n    */\n    @Input() hl: string;\n\n    /**\n    * Tab index\n    */\n    @Input() tabIndex = 0;\n\n    /**\n    * Called when captcha receives successful response.\n    * Captcha response token is passed to event.\n    */\n    @Output() success = new EventEmitter<string>();\n\n    /**\n    * Called when captcha is loaded. Event receives id of the captcha\n    */\n    @Output() load = new EventEmitter<number>();\n\n    /**\n    * Called when captcha is reset.\n    */\n    @Output() reset = new EventEmitter<void>();\n\n    /**\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\n    */\n    @Output() ready = new EventEmitter<void>();\n\n    /**\n    * Error callback\n    */\n    @Output() error = new EventEmitter<void>();\n\n    /**\n    * Expired callback\n    */\n    @Output() expire = new EventEmitter<void>();\n\n    abstract captchaWrapperElem?: ElementRef;\n\n    /**\n    * Indicates if captcha should be set on load\n    */\n    private setupAfterLoad = false;\n\n    /**\n    * Captcha element\n    */\n    protected captchaElem?: HTMLElement;\n\n    /**\n    * Id of the captcha elem\n    */\n    protected captchaId?: number;\n\n    /**\n    * Holds last response value\n    */\n    protected currentResponse?: string;\n\n    /**\n    * If enabled, captcha will reset after receiving success response. This is useful\n    * when invisible captcha need to be resolved multiple times on same page\n    */\n    protected resetCaptchaAfterSuccess = false;\n\n    /**\n    * Captcha type\n    */\n    protected abstract recaptchaType: ReCaptchaType;\n\n    /**\n    * Required by ControlValueAccessor\n    */\n    protected onChange: (value: string | undefined) => void;\n    protected onTouched: (value: string | undefined) => void;\n\n    /**\n    * Indicates if captcha is loaded\n    */\n    public isLoaded = false;\n\n    /**\n    * Reference to global reCaptcha API\n    */\n    public reCaptchaApi?: any;\n\n    /**\n    * Id of the DOM element wrapping captcha\n    */\n    public captchaElemId?: string;\n\n    /**\n    * Form Control to be enable usage in reactive forms\n    */\n    public control?: AbstractControl | null;\n\n    protected constructor(\n        protected renderer: Renderer2,\n        protected zone: NgZone,\n        protected injector: Injector,\n        protected scriptService: ScriptService,\n    ) { }\n\n    ngAfterViewInit() {\n        try {\n            this.control = this.injector.get<NgControl>(NgControl).control;\n        }\n        catch {}\n    }\n\n    ngAfterViewChecked(): void {\n        if (this.setupCaptcha) {\n            this.setupCaptcha = false;\n            this.setupComponent();\n        }\n    }\n\n    /**\n    * Gets reCaptcha properties\n    */\n    protected abstract getCaptchaProperties(): any;\n\n    /**\n    * Used for captcha specific setup\n    */\n    protected abstract captchaSpecificSetup(): void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        // cleanup scripts if language changed because they need to be reloaded\n        if (changes && changes.hl) {\n            // cleanup scripts when language changes\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\n                this.scriptService.cleanup();\n            }\n        }\n\n        if (changes && changes.useGlobalDomain) {\n            // cleanup scripts when domain changes\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\n                this.scriptService.cleanup();\n            }\n        }\n\n        this.setupCaptcha = true;\n    }\n\n    /**\n    * Gets captcha response as per reCaptcha docs\n    */\n    getResponse(): string {\n        return this.reCaptchaApi.getResponse(this.captchaId);\n    }\n\n    /**\n    * Gets Id of captcha widget\n    */\n    getCaptchaId(): number | undefined {\n        return this.captchaId;\n    }\n\n    /**\n    * Resets captcha\n    */\n    resetCaptcha(): void {\n        this.zone.run(() => {\n            // reset captcha using Google js api\n            this.reCaptchaApi.reset();\n\n            // required due to forms\n            this.onChange(undefined);\n            this.onTouched(undefined);\n\n\n            // trigger reset event\n            this.reset.next();\n        });\n    }\n\n    /**\n    * Gets last submitted captcha response\n    */\n    getCurrentResponse(): string | undefined {\n        return this.currentResponse;\n    }\n\n    /**\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\n    */\n    reloadCaptcha(): void {\n        this.setupComponent();\n    }\n\n    protected ensureCaptchaElem(captchaElemId: string): void {\n        const captchaElem = document.getElementById(captchaElemId);\n\n        if (!captchaElem) {\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n        }\n\n        // assign captcha alem\n        this.captchaElem = captchaElem;\n    }\n\n    /**\n    * Responsible for instantiating captcha element\n    */\n    protected renderReCaptcha(): void {\n        // run outside angular zone due to timeout issues when testing\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\n        this.zone.runOutsideAngular(() => {\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n            this.ready.next();\n        });\n    }\n\n    /**\n    * Called when captcha receives response\n    * @param callback Callback\n    */\n    protected handleCallback(callback: any): void {\n        this.currentResponse = callback;\n        this.success.next(callback);\n\n        this.zone.run(() => {\n            this.onChange(callback);\n            this.onTouched(callback);\n        });\n\n        if (this.resetCaptchaAfterSuccess) {\n            this.resetCaptcha();\n        }\n    }\n\n    private getPseudoUniqueNumber(): number {\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n    }\n\n    private setupComponent(): void {\n        // captcha specific setup\n        this.captchaSpecificSetup();\n\n        // create captcha wrapper\n        this.createAndSetCaptchaElem();\n\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (grecaptcha) => {\n            this.onloadCallback(grecaptcha);\n        }, this.hl);\n    }\n\n    /**\n    * Called when google's recaptcha script is ready\n    */\n    private onloadCallback(grecapcha: any): void {\n        // assign reference to reCaptcha Api once its loaded\n        this.reCaptchaApi = grecapcha;\n\n        if (!this.reCaptchaApi) {\n            throw Error(`ReCaptcha Api was not initialized correctly`);\n        }\n\n        // loaded flag\n        this.isLoaded = true;\n\n        // fire load event\n        this.load.next();\n\n        // render captcha\n        this.renderReCaptcha();\n\n        // setup component if it was flagged as such\n        if (this.setupAfterLoad) {\n            this.setupAfterLoad = false;\n            this.setupComponent();\n        }\n    }\n\n    private generateNewElemId(): string {\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n    }\n\n    private createAndSetCaptchaElem(): void {\n        // generate new captcha id\n        this.captchaElemId = this.generateNewElemId();\n\n        if (!this.captchaElemId) {\n            throw Error(`Captcha elem Id is not set`);\n        }\n\n        if (!this.captchaWrapperElem) {\n            throw Error(`Captcha DOM element is not initialized`);\n        }\n\n        // remove old html\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\n\n        // create new wrapper for captcha\n        const newElem = this.renderer.createElement('div');\n        newElem.id = this.captchaElemId;\n\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\n\n        // update captcha elem\n        this.ensureCaptchaElem(this.captchaElemId);\n    }\n\n    /**\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\n     */\n    public writeValue(obj: any): void { }\n\n    /**\n     * This method helps us tie together recaptcha and our formControl values\n     */\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /**\n    * At some point we might be interested whether the user has touched our component\n    */\n    public registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /**\n    * Handles error callback\n    */\n    protected handleErrorCallback(): void {\n        this.zone.run(() => {\n            this.onChange(undefined);\n            this.onTouched(undefined);\n        });\n\n        this.error.next();\n    }\n\n    /**\n    * Handles expired callback\n    */\n    protected handleExpireCallback(): void {\n        this.expire.next();\n\n        // reset captcha on expire callback\n        this.resetCaptcha();\n    }\n}\n\n","export enum ReCaptchaType {\n\n    InvisibleReCaptcha,\n    ReCaptcha2\n}\n","import { Injectable, NgZone } from '@angular/core';\n\ndeclare var document: any;\n\n@Injectable()\nexport class ScriptService {\n\n    /**\n     * Name of the global google recaptcha script\n     */\n    protected readonly windowGrecaptcha = 'grecaptcha';\n\n    /**\n    * Name of the global callback\n    */\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\n\n    protected readonly globalDomain: string = 'recaptcha.net';\n\n    protected readonly defaultDomain: string = 'google.com';\n\n    constructor(\n        protected zone: NgZone,\n    ) {\n    }\n\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\n        if (this.grecaptchaScriptLoaded()) {\n            // recaptcha script is already loaded\n            // just call the callback\n            this.zone.run(() => {\n                onLoad(window[this.windowGrecaptcha]);\n            });\n            return;\n        }\n\n        // we need to patch the callback through global variable, otherwise callback is not accessible\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\n            onLoad.bind(this, window[this.windowGrecaptcha])\n        ));\n\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.innerHTML = '';\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\n        scriptElem.async = true;\n        scriptElem.defer = true;\n\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n\n    cleanup(): void {\n        window[this.windowOnLoadCallbackProperty] = undefined;\n        window[this.windowGrecaptcha] = undefined;\n    }\n\n    /**\n     * Indicates if google recaptcha script is available and ready to be used\n     */\n    private grecaptchaScriptLoaded(): boolean {\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets language param used in script url\n     */\n    private getLanguageParam(hl?: string): string {\n        if (!hl) {\n            return '';\n        }\n\n        return `&hl=${hl}`;\n    }\n\n    /**\n    * Url to google api script\n    */\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\n\n        // tslint:disable-next-line:max-line-length\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\n    }\n\n}\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { ScriptService } from '../services/script.service';\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\n\n@Component({\n  selector: 'ngx-invisible-recaptcha',\n  template: `\n  <div #captchaWrapperElem></div>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n      multi: true,\n    }\n  ]\n})\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\n\n  /**\n   * This size representing invisible captcha\n   */\n  protected readonly size = 'invisible';\n\n  /**\n   * Theme\n   */\n  @Input() theme: 'dark' | 'light' = 'light';\n\n  /**\n   * Badge\n   */\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\n\n  /**\n   * Language code. Auto-detects the user's language if unspecified.\n   */\n  @Input() hl: string;\n\n  @ViewChild('captchaWrapperElem', { static: false }) captchaWrapperElem: ElementRef;\n\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\n\n  constructor(\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected injector: Injector,\n    protected scriptService: ScriptService\n  ) {\n    super(renderer, zone, injector, scriptService);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  /**\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\n   */\n  execute(): void {\n    // execute captcha\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\n  }\n\n  protected captchaSpecificSetup(): void {\n  }\n\n  /**\n  * Gets reCaptcha properties\n  */\n  protected getCaptchaProperties(): any {\n    return {\n      'sitekey': this.siteKey,\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'badge': this.badge,\n      'type': this.type,\n      'tabindex': this.tabIndex,\n      'size': this.size,\n      'theme': this.theme\n    };\n  }\n\n\n}\n\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { ScriptService } from '../services/script.service';\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\n\n@Component({\n  selector: 'ngx-recaptcha2',\n  template: `\n  <div #captchaWrapperElem></div>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ReCaptcha2Component),\n      multi: true,\n    }\n  ]\n})\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\n\n  /**\n  * Name of the global expire callback\n  */\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n\n  /**\n  * Name of the global error callback\n  */\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n\n  /**\n   * Theme\n   */\n  @Input() theme: 'dark' | 'light' = 'light';\n\n  /**\n  * Size\n  */\n  @Input() size: 'compact' | 'normal' = 'normal';\n\n  /**\n   * Language code. Auto-detects the user's language if unspecified.\n   */\n  @Input() hl: string;\n\n  @ViewChild('captchaWrapperElem', { static: false}) captchaWrapperElem: ElementRef;\n\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\n\n  constructor(\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected injector: Injector,\n    protected scriptService: ScriptService,\n  ) {\n    super(renderer, zone, injector, scriptService);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy(): void {\n    window[this.windowOnErrorCallbackProperty] = {};\n    window[this.windowOnExpireCallbackProperty] = {};\n  }\n\n  protected captchaSpecificSetup(): void {\n    this.registerCallbacks();\n  }\n\n  /**\n   * Gets reCaptcha properties\n  */\n  protected getCaptchaProperties(): any {\n    return {\n      'sitekey': this.siteKey,\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'theme': this.theme,\n      'type': this.type,\n      'size': this.size,\n      'tabindex': this.tabIndex\n    };\n  }\n\n  /**\n   * Registers global callbacks\n  */\n  private registerCallbacks(): void {\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n  }\n}\n\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { ScriptService } from './script.service';\n\n@Injectable()\nexport class ReCaptchaV3Service {\n  constructor(protected scriptService: ScriptService, protected zone: NgZone) {}\n\n  /**\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\n   * this callback in your backend to get meaningful results.\n   *\n   * For more information see https://developers.google.com/recaptcha/docs/v3\n   *\n   * @param siteKey Site key found in your google admin panel\n   * @param action Action to log\n   */\n  execute(\n    siteKey: string,\n    action: string,\n    callback: (token: string) => void,\n    config?: {\n      useGlobalDomain: boolean;\n    }\n  ): void {\n    this.executeAsPromise(siteKey, action, config).then(callback);\n  }\n\n  /**\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\n   * this token in your backend to get meaningful results.\n   *\n   * For more information see https://developers.google.com/recaptcha/docs/v3\n   *\n   * @param siteKey Site key found in your google admin panel\n   * @param action Action to log\n   */\n  executeAsPromise(\n    siteKey: string,\n    action: string,\n    config?: {\n      useGlobalDomain: boolean;\n    }\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\n\n      const onRegister = grecaptcha => {\n        this.zone.runOutsideAngular(() => {\n          try {\n            grecaptcha\n              .execute(siteKey, { action })\n              .then(token => this.zone.run(() => resolve(token)));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n\n      this.scriptService.registerCaptchaScript(\n        useGlobalDomain,\n        siteKey,\n        onRegister\n      );\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\nimport { ScriptService } from './services/script.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ],\n  providers: [\n    ScriptService,\n    ReCaptchaV3Service\n  ],\n  exports: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ]\n})\nexport class NgxCaptchaModule {\n}\n\n\n"]}