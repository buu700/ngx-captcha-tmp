{"version":3,"file":"ngx-captcha.js","sources":["ng://ngx-captcha/lib/components/base-recaptcha.component.ts","ng://ngx-captcha/lib/models/recaptcha-type.enum.ts","ng://ngx-captcha/lib/services/script.service.ts","ng://ngx-captcha/lib/components/invisible-recaptcha.component.ts","ng://ngx-captcha/lib/components/recaptcha-2.component.ts","ng://ngx-captcha/lib/services/recaptcha_v3.service.ts","ng://ngx-captcha/lib/ngx-captcha.module.ts"],"sourcesContent":["import {\n    AfterViewChecked,\n    AfterViewInit,\n    ElementRef,\n    EventEmitter,\n    Injector,\n    Input,\n    NgZone,\n    OnChanges,\n    Output,\n    Renderer2,\n    SimpleChanges,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl, AbstractControl } from '@angular/forms';\nimport { Type } from '@angular/core';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { ScriptService } from '../services/script.service';\n\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked {\n\n    /**\n    * Prefix of the captcha element\n    */\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\n\n    private setupCaptcha: boolean = true;\n\n    /**\n    * Google's site key.\n    * You can find this under https://www.google.com/recaptcha\n    */\n    @Input() siteKey: string;\n\n    /**\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\n     */\n    @Input() useGlobalDomain: boolean = false;\n\n    /**\n    * Type\n    */\n    @Input() type: 'audio' | 'image' = 'image';\n\n    /**\n    * Language code. Auto-detects the user's language if unspecified.\n    */\n    @Input() hl: string;\n\n    /**\n    * Tab index\n    */\n    @Input() tabIndex = 0;\n\n    /**\n    * Called when captcha receives successful response.\n    * Captcha response token is passed to event.\n    */\n    @Output() success = new EventEmitter<string>();\n\n    /**\n    * Called when captcha is loaded. Event receives id of the captcha\n    */\n    @Output() load = new EventEmitter<number>();\n\n    /**\n    * Called when captcha is reset.\n    */\n    @Output() reset = new EventEmitter<void>();\n\n    /**\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\n    */\n    @Output() ready = new EventEmitter<void>();\n\n    /**\n    * Error callback\n    */\n    @Output() error = new EventEmitter<void>();\n\n    /**\n    * Expired callback\n    */\n    @Output() expire = new EventEmitter<void>();\n\n    abstract captchaWrapperElem?: ElementRef;\n\n    /**\n    * Indicates if captcha should be set on load\n    */\n    private setupAfterLoad = false;\n\n    /**\n    * Captcha element\n    */\n    protected captchaElem?: HTMLElement;\n\n    /**\n    * Id of the captcha elem\n    */\n    protected captchaId?: number;\n\n    /**\n    * Holds last response value\n    */\n    protected currentResponse?: string;\n\n    /**\n    * If enabled, captcha will reset after receiving success response. This is useful\n    * when invisible captcha need to be resolved multiple times on same page\n    */\n    protected resetCaptchaAfterSuccess = false;\n\n    /**\n    * Captcha type\n    */\n    protected abstract recaptchaType: ReCaptchaType;\n\n    /**\n    * Required by ControlValueAccessor\n    */\n    protected onChange: (value: string | undefined) => void;\n    protected onTouched: (value: string | undefined) => void;\n\n    /**\n    * Indicates if captcha is loaded\n    */\n    public isLoaded = false;\n\n    /**\n    * Reference to global reCaptcha API\n    */\n    public reCaptchaApi?: any;\n\n    /**\n    * Id of the DOM element wrapping captcha\n    */\n    public captchaElemId?: string;\n\n    /**\n    * Form Control to be enable usage in reactive forms\n    */\n    public control?: AbstractControl | null;\n\n    protected constructor(\n        protected renderer: Renderer2,\n        protected zone: NgZone,\n        protected injector: Injector,\n        protected scriptService: ScriptService,\n    ) { }\n\n    ngAfterViewInit() {\n        try {\n            this.control = this.injector.get<NgControl>(NgControl).control;\n        }\n        catch {}\n    }\n\n    ngAfterViewChecked(): void {\n        if (this.setupCaptcha) {\n            this.setupCaptcha = false;\n            this.setupComponent();\n        }\n    }\n\n    /**\n    * Gets reCaptcha properties\n    */\n    protected abstract getCaptchaProperties(): any;\n\n    /**\n    * Used for captcha specific setup\n    */\n    protected abstract captchaSpecificSetup(): void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        // cleanup scripts if language changed because they need to be reloaded\n        if (changes && changes.hl) {\n            // cleanup scripts when language changes\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\n                this.scriptService.cleanup();\n            }\n        }\n\n        if (changes && changes.useGlobalDomain) {\n            // cleanup scripts when domain changes\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\n                this.scriptService.cleanup();\n            }\n        }\n\n        this.setupCaptcha = true;\n    }\n\n    /**\n    * Gets captcha response as per reCaptcha docs\n    */\n    getResponse(): string {\n        return this.reCaptchaApi.getResponse(this.captchaId);\n    }\n\n    /**\n    * Gets Id of captcha widget\n    */\n    getCaptchaId(): number | undefined {\n        return this.captchaId;\n    }\n\n    /**\n    * Resets captcha\n    */\n    resetCaptcha(): void {\n        this.zone.run(() => {\n            // reset captcha using Google js api\n            this.reCaptchaApi.reset();\n\n            // required due to forms\n            this.onChange(undefined);\n            this.onTouched(undefined);\n\n\n            // trigger reset event\n            this.reset.next();\n        });\n    }\n\n    /**\n    * Gets last submitted captcha response\n    */\n    getCurrentResponse(): string | undefined {\n        return this.currentResponse;\n    }\n\n    /**\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\n    */\n    reloadCaptcha(): void {\n        this.setupComponent();\n    }\n\n    protected ensureCaptchaElem(captchaElemId: string): void {\n        const captchaElem = document.getElementById(captchaElemId);\n\n        if (!captchaElem) {\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n        }\n\n        // assign captcha alem\n        this.captchaElem = captchaElem;\n    }\n\n    /**\n    * Responsible for instantiating captcha element\n    */\n    protected renderReCaptcha(): void {\n        // run outside angular zone due to timeout issues when testing\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\n        this.zone.runOutsideAngular(() => {\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n            this.ready.next();\n        });\n    }\n\n    /**\n    * Called when captcha receives response\n    * @param callback Callback\n    */\n    protected handleCallback(callback: any): void {\n        this.currentResponse = callback;\n        this.success.next(callback);\n\n        this.zone.run(() => {\n            this.onChange(callback);\n            this.onTouched(callback);\n        });\n\n        if (this.resetCaptchaAfterSuccess) {\n            this.resetCaptcha();\n        }\n    }\n\n    private getPseudoUniqueNumber(): number {\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n    }\n\n    private setupComponent(): void {\n        // captcha specific setup\n        this.captchaSpecificSetup();\n\n        // create captcha wrapper\n        this.createAndSetCaptchaElem();\n\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (grecaptcha) => {\n            this.onloadCallback(grecaptcha);\n        }, this.hl);\n    }\n\n    /**\n    * Called when google's recaptcha script is ready\n    */\n    private onloadCallback(grecapcha: any): void {\n        // assign reference to reCaptcha Api once its loaded\n        this.reCaptchaApi = grecapcha;\n\n        if (!this.reCaptchaApi) {\n            throw Error(`ReCaptcha Api was not initialized correctly`);\n        }\n\n        // loaded flag\n        this.isLoaded = true;\n\n        // fire load event\n        this.load.next();\n\n        // render captcha\n        this.renderReCaptcha();\n\n        // setup component if it was flagged as such\n        if (this.setupAfterLoad) {\n            this.setupAfterLoad = false;\n            this.setupComponent();\n        }\n    }\n\n    private generateNewElemId(): string {\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n    }\n\n    private createAndSetCaptchaElem(): void {\n        // generate new captcha id\n        this.captchaElemId = this.generateNewElemId();\n\n        if (!this.captchaElemId) {\n            throw Error(`Captcha elem Id is not set`);\n        }\n\n        if (!this.captchaWrapperElem) {\n            throw Error(`Captcha DOM element is not initialized`);\n        }\n\n        // remove old html\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\n\n        // create new wrapper for captcha\n        const newElem = this.renderer.createElement('div');\n        newElem.id = this.captchaElemId;\n\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\n\n        // update captcha elem\n        this.ensureCaptchaElem(this.captchaElemId);\n    }\n\n    /**\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\n     */\n    public writeValue(obj: any): void { }\n\n    /**\n     * This method helps us tie together recaptcha and our formControl values\n     */\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    /**\n    * At some point we might be interested whether the user has touched our component\n    */\n    public registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    /**\n    * Handles error callback\n    */\n    protected handleErrorCallback(): void {\n        this.zone.run(() => {\n            this.onChange(undefined);\n            this.onTouched(undefined);\n        });\n\n        this.error.next();\n    }\n\n    /**\n    * Handles expired callback\n    */\n    protected handleExpireCallback(): void {\n        this.expire.next();\n\n        // reset captcha on expire callback\n        this.resetCaptcha();\n    }\n}\n\n","export enum ReCaptchaType {\n\n    InvisibleReCaptcha,\n    ReCaptcha2\n}\n","import { Injectable, NgZone } from '@angular/core';\n\ndeclare var document: any;\n\n@Injectable()\nexport class ScriptService {\n\n    /**\n     * Name of the global google recaptcha script\n     */\n    protected readonly windowGrecaptcha = 'grecaptcha';\n\n    /**\n    * Name of the global callback\n    */\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\n\n    protected readonly globalDomain: string = 'recaptcha.net';\n\n    protected readonly defaultDomain: string = 'google.com';\n\n    constructor(\n        protected zone: NgZone,\n    ) {\n    }\n\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\n        if (this.grecaptchaScriptLoaded()) {\n            // recaptcha script is already loaded\n            // just call the callback\n            this.zone.run(() => {\n                onLoad(window[this.windowGrecaptcha]);\n            });\n            return;\n        }\n\n        // we need to patch the callback through global variable, otherwise callback is not accessible\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\n            onLoad.bind(this, window[this.windowGrecaptcha])\n        ));\n\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.innerHTML = '';\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\n        scriptElem.async = true;\n        scriptElem.defer = true;\n\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n\n    cleanup(): void {\n        window[this.windowOnLoadCallbackProperty] = undefined;\n        window[this.windowGrecaptcha] = undefined;\n    }\n\n    /**\n     * Indicates if google recaptcha script is available and ready to be used\n     */\n    private grecaptchaScriptLoaded(): boolean {\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets language param used in script url\n     */\n    private getLanguageParam(hl?: string): string {\n        if (!hl) {\n            return '';\n        }\n\n        return `&hl=${hl}`;\n    }\n\n    /**\n    * Url to google api script\n    */\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\n\n        // tslint:disable-next-line:max-line-length\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\n    }\n\n}\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { ScriptService } from '../services/script.service';\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\n\n@Component({\n  selector: 'ngx-invisible-recaptcha',\n  template: `\n  <div #captchaWrapperElem></div>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n      multi: true,\n    }\n  ]\n})\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\n\n  /**\n   * This size representing invisible captcha\n   */\n  protected readonly size = 'invisible';\n\n  /**\n   * Theme\n   */\n  @Input() theme: 'dark' | 'light' = 'light';\n\n  /**\n   * Badge\n   */\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\n\n  /**\n   * Language code. Auto-detects the user's language if unspecified.\n   */\n  @Input() hl: string;\n\n  @ViewChild('captchaWrapperElem', { static: false }) captchaWrapperElem: ElementRef;\n\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\n\n  constructor(\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected injector: Injector,\n    protected scriptService: ScriptService\n  ) {\n    super(renderer, zone, injector, scriptService);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  /**\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\n   */\n  execute(): void {\n    // execute captcha\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\n  }\n\n  protected captchaSpecificSetup(): void {\n  }\n\n  /**\n  * Gets reCaptcha properties\n  */\n  protected getCaptchaProperties(): any {\n    return {\n      'sitekey': this.siteKey,\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'badge': this.badge,\n      'type': this.type,\n      'tabindex': this.tabIndex,\n      'size': this.size,\n      'theme': this.theme\n    };\n  }\n\n\n}\n\n","import {\n  Component,\n  ElementRef,\n  forwardRef,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\nimport { ScriptService } from '../services/script.service';\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\n\n@Component({\n  selector: 'ngx-recaptcha2',\n  template: `\n  <div #captchaWrapperElem></div>`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ReCaptcha2Component),\n      multi: true,\n    }\n  ]\n})\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\n\n  /**\n  * Name of the global expire callback\n  */\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n\n  /**\n  * Name of the global error callback\n  */\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n\n  /**\n   * Theme\n   */\n  @Input() theme: 'dark' | 'light' = 'light';\n\n  /**\n  * Size\n  */\n  @Input() size: 'compact' | 'normal' = 'normal';\n\n  /**\n   * Language code. Auto-detects the user's language if unspecified.\n   */\n  @Input() hl: string;\n\n  @ViewChild('captchaWrapperElem', { static: false}) captchaWrapperElem: ElementRef;\n\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\n\n  constructor(\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected injector: Injector,\n    protected scriptService: ScriptService,\n  ) {\n    super(renderer, zone, injector, scriptService);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n  }\n\n  ngOnDestroy(): void {\n    window[this.windowOnErrorCallbackProperty] = {};\n    window[this.windowOnExpireCallbackProperty] = {};\n  }\n\n  protected captchaSpecificSetup(): void {\n    this.registerCallbacks();\n  }\n\n  /**\n   * Gets reCaptcha properties\n  */\n  protected getCaptchaProperties(): any {\n    return {\n      'sitekey': this.siteKey,\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'theme': this.theme,\n      'type': this.type,\n      'size': this.size,\n      'tabindex': this.tabIndex\n    };\n  }\n\n  /**\n   * Registers global callbacks\n  */\n  private registerCallbacks(): void {\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n  }\n}\n\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { ScriptService } from './script.service';\n\n@Injectable()\nexport class ReCaptchaV3Service {\n  constructor(protected scriptService: ScriptService, protected zone: NgZone) {}\n\n  /**\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\n   * this callback in your backend to get meaningful results.\n   *\n   * For more information see https://developers.google.com/recaptcha/docs/v3\n   *\n   * @param siteKey Site key found in your google admin panel\n   * @param action Action to log\n   */\n  execute(\n    siteKey: string,\n    action: string,\n    callback: (token: string) => void,\n    config?: {\n      useGlobalDomain: boolean;\n    }\n  ): void {\n    this.executeAsPromise(siteKey, action, config).then(callback);\n  }\n\n  /**\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\n   * this token in your backend to get meaningful results.\n   *\n   * For more information see https://developers.google.com/recaptcha/docs/v3\n   *\n   * @param siteKey Site key found in your google admin panel\n   * @param action Action to log\n   */\n  executeAsPromise(\n    siteKey: string,\n    action: string,\n    config?: {\n      useGlobalDomain: boolean;\n    }\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\n\n      const onRegister = grecaptcha => {\n        this.zone.runOutsideAngular(() => {\n          try {\n            grecaptcha\n              .execute(siteKey, { action })\n              .then(token => this.zone.run(() => resolve(token)));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n\n      this.scriptService.registerCaptchaScript(\n        useGlobalDomain,\n        siteKey,\n        onRegister\n      );\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\nimport { ScriptService } from './services/script.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ],\n  providers: [\n    ScriptService,\n    ReCaptchaV3Service\n  ],\n  exports: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ]\n})\nexport class NgxCaptchaModule {\n}\n\n\n"],"names":[],"mappings":"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"}